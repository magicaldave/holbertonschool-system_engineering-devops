What Happens When You Type holbertonschool.com in Your Browser and Press Enter?

What happens when you browse to any particular website? To oversimplify an incredibly broad topic, I personally find this entire process can be best described using what's known as the OSI model. For the sake of discussion, we'll only really get into a very light description of about half of it, as they're the most relevant to the topic. While the entire model can be very interesting, a simple discussion of just an ethernet connection between your home computer and router could occupy the full length of this document.

In networking, the OSI model is a means by which networks are described by layers. Let's throw in an example, and then delve a bit deeper.

Starting with layer seven, this is where the user experience begins. You, the reader and user, typed "holbertonschool.com" into your web browser - that browser, that interface, or app, is layer seven, whose only real job is to interact with you. Layer 7 is simply responsible for user interaction and multimedia delivery, in networking terms. Next, your data is secured, or "encrypted", which means it can only be read by whatever you're supposed to be talking to, and not anyone in between. Once your traffic is secured, an actual conversation between devices begins as a TCP or UDP connection is established. Once that connection exists, traffic is actually send over either TCP or UDP, depending on the traffic. For context, all data sent and received during a session with "holbertonschool.com" is sent over TCP to ensure no data is lost along the way. In contrast, some games might use UDP connections to get improved speed, but with occasional hiccups. It's important to note that your traffic will actually go all the way up and down the OSI model many times as it tries to reach its true destination.

Now that we've skimmed over the general idea of how the traffic is delivered between devices at a higher level, we can talk a bit more about what's actually taking place when we attempt to visit "holbertonschool.com" in a browser. First, when you hit enter, your system needs to figure out where "holbertonschool.com" actually is and how to talk to it. In networking, a website is generally referred to by its some human readable one, instead of one that's meaningful to a computer. Consider your own cell phone - when you go to text a friend, you have their phone number saved according to their name instead of typing the number every time. The internet works much the same way, with the exception that the whole point is that you never have to know a website's "phone number", or IP address, in order to reach it - you can simply remember the name, type that, and you're browsing!

This is accomplished using DNS, or the Domain Name Service. Every computer has an IP address, which can be effectively considered its phone number as previously mentioned. DNS' role is simply to map this IP address to a human readable name, or a site's domain name. When a domain name is registered, it has to point to a specific IP address or computer. Some entity, typically whomever registered that domain, will then have to tell the rest of the internet that a specific domain name points to a specific IP. This process can be slow but typically within 24 hours anyone on the planet can accurately query a DNS record.

We've skipped one other aspect of networking that needs to be explained before going back into context, and staying there: ports. Back to the example of your cell phone, in the modern era your phone number isn't the only way to reach you. Most people have multiple social media apps, email accounts, messengers, et cetera on their phones. How does your phone allow all of these things to use your internet connection at once? It would be a somewhat accurate simplification to say that the role of ports is to allow multiple services to run at once on your device. For example, internet traffic typically goes over port 443, for the HTTPS protocol. What would happen if Facebook and Snapchat both attempted to talk on the same port at the exact same time? Well, one of them wouldn't, so they are assigned to communicate over separate ports. If facebook uses 443, and Snap uses 444, this issue will never occur. This isn't entirely an accurate representation of how ports work in an average operating system but it will serve this discussion fine.

Finally, we're back to our web browser - our device is now trying to figure out where "holbertonschool.com" actually is. A DNS request is sent on port 53 to our nearest DNS server for the IP of holbertonschool.com. Depending on how recently it served that same page, if at all, it'll reach out to a more authoritative DNS server to confirm the IP address before sending it back to our device. Alternatively if the address is known by our local DNS server, or even our browser cache, the request will not occur.

However the IP address was given to our device, it now will reach out to the IP address of holbertonschool.com and attempt to initiate an encrypted connection on port 443. Specifically, we're trying to send HTTPS traffic over port 443, via the TCP transmission protocol. If the connection is successfully encrypted as we mentioned in the first paragraph, then we have can actually start communicating with the site. First and foremost, with its firewall.

A firewall's role is simple - to erect a large `wall of fire` preventing unauthorized access to your network, and assisting in routing incoming network traffic. If the firewall determines that the incoming traffic meets its allowed rules, the firewall sends the traffic on to its destination. If not, the traffic is ignored.

In the case of holbertonschool.com, after the firewall authorizes the traffic, it'll be rerouted to another device known as a load balancer. These types of servers are fortunately fairly simple! Their job is to make sure that no one server is being overwrked at a time. That's it. They can decide where to route traffic via multiple means, but typically the 'round-robin' format is used, where traffic is routed to each server in a specific order.

Finally, the traffic has reached an actual web server, after being passed through the load balancer. The web server will compare the requested url with ones it actually serves, and if so, return an HTML document back to the device that originally requested it. There could be many things taking place here!

Without knowing the backend for sure, it can't be said with reasonable certainty what all is happening on the backend of holbertonschool.com. However, the homepage includes multiple student testimonials - this information could easily be stored in a database, which the web server queries in order to create slightly different versions of that webpage each time it is requested. Perhaps a new review was added, a typographical error occurred, or even different reviews are shown for different reasons - modifying the database itself allows client devices to receive different webpages without actually changing the original documents, or bringing the website down.

So, freshly-generated HTML in hand, the document bounces back down the internet to whomever requested it, and the browser begins to draw the contents of that document. HTML is evaluated top to bottom, with the largest assets like images being downloaded first, so the page itself should almost immediately be visible as javascript trackers begin to load in the background. Once the page has been drawn and ads have been served, the process is mostly complete. Some dynamic content like slideshows will continue to execute, but otherwise the process is back to layer seven - the user interaction. In other words, nothing else is happening until you do something.

That was a lot! To cap this off, let's remember the high-level view of what happens when you try to visis holbertonschool.com. Your browser first tries to find the IP of the website, then attempts to initiate a connection, secure that connection, then actually send and receive HTTP data. That traffic is then filtered through a firewall and load balancer, before hitting the destination web server, which then serves some form of HTML back to the requesting device. Afterward, the rest is up to you.

Thank you for reading!
Here's some additional material on the subject - 